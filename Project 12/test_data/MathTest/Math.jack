/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    static int next2qy;

    // Initializes the Math library.
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;
        return;
    }

    function boolean bit(int x, int i) {
        var boolean flag;
        let flag = ~((x & powersOfTwo[i]) = 0);
        return flag;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedx;
        var int i;

        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var boolean signX, signY;
        var int result;

        let signX = (x > 0);
        let signY = (y > 0);

        let x = Math.abs(x);
        let y = Math.abs(y);
        let result = Math.supportDivide(x, y);

        if (signX = signY) { return result; }
        else { return -result; }
    }
    
    function int supportDivide(int x, int y) {
        var int q;

        // if (y < 0) {
        //     do Sys.error(3); // add here error code
        // }

        if (x < y) {
            let next2qy = 0;
            return 0;
        }

        let q = Math.supportDivide(x, y + y);

        // I hope it works
        if ((x - next2qy) < y) {
            return q + q;
        }
        else {
            let next2qy = next2qy + y;
            return q + q + 1; 
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, k, m;
        let i = 7;
        let y = 0;
        while (~(i < 0)) {
            let k = y + powersOfTwo[i];
            let m = k * k;
            if (~(m > x) & (m > 0)) { // probably add Sys.error()
                let y = k;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        else { return b; }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) { return a; }
        else { return b; }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) { return x; }
        else { return -x; }
    }
}
