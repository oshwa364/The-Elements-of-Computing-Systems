/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        let i = 0;
        if (str[0] = 45) {
            let i = 1;
        }
        let val = 0;
        while ((i < len) & String.isDigit(str[i])) {
            let d = String.digitVal(str[i]);
            let val = (val * 10) + d;
            let i = i + 1;
        }
        
        if (str[0] = 45) { let val = -val; }
        return val;
    }

    /** Returns whether the given char is a digit */
    function boolean isDigit(char c) {
        return (c > 47) & (c < 58);
    }

    /** Returns the integer value of the given digit character */
    function int digitVal(char c) {
        return c - 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
        do supportSetInt(val);
        return;
    }

    method void supportSetInt(int val) {
        var int lastDigit, k;
        var char c;

        let k = val / 10;
        let lastDigit = val - (k * 10);
        let c = String.charVal(lastDigit);

        if (val < 10) { do appendChar(c); }
        else { 
            do supportSetInt(k);
            do appendChar(c);
        }
        return;
    }

    /** Returns the character value of the given integer value */
    function char charVal(char c) {
        return c + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
